<?xml version="1.0"?>
<!DOCTYPE cxchelptopics SYSTEM "CXCHelp.dtd">
<!--

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
This is a generated file.  DO NOT EDIT!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

-->
<cxchelptopics><ENTRY pkg="sherpa" key="neldermead" refkeywords="minimization minimize optimization optimize method simplex neldermead nelder-mead likelihood converge convergence" seealsogroups="sh.method " displayseealsogroups="" context="methods">

<SYNOPSIS>
Nelder-Mead Simplex optimization method
</SYNOPSIS>

<DESC>
  <PARA>
    The Nelder-Mead Simplex algorithm, devised by J.A. Nelder and
    R. Mead (Computer Journal, 1965, vol 7, pp 308-313), is a direct
    search method of optimization for finding local minimum of an
    objective function of several variables. The implementation of
    Nelder-Mead Simplex algorithm is a variation of the algorithm
    outlined in the following two papers: 
  </PARA>

  <LIST>
    <ITEM>
      Jeffrey C. Lagarias, James A. Reeds, Margaret H. Wright, Paul
      E. Wright "Convergence Properties of the Nelder-Mead Simplex
      Algorithm in Low Dimensions", SIAM Journal on
      Optimization,Vol. 9, No. 1 (1998), pages 112-147.
      http://citeseer.ist.psu.edu/3996.html
    </ITEM>
    
    <ITEM>
      Wright, M. H. (1996) "Direct Search Methods: Once Scorned, Now
      Respectable" in Numerical Analysis 1995 (Proceedings of the 1995
      Dundee Biennial Conference in Numerical Analysis)
      (D.F. Griffiths and G.A. Watson, eds.), 191-208, Addison Wesley
      Longman, Harlow, United Kingdom. 
      http://citeseer.ist.psu.edu/155516.html
    </ITEM>
  </LIST>

  <PARA>
    As noted in the paper, terminating the simplex is not a simple
    task: 
  </PARA>

  <PARA>
    "For any non-derivative method, the issue of termination is
    problematical as well as highly sensitive to problem scaling. 
    Since gradient information is unavailable, it is provably
    impossible to verify closeness to optimality simply by sampling f
    at a finite number of points.  Most implementations of direct
    search methods terminate based on two criteria intended to reflect
    the progress of the algorithm: either the function values at the
    vertices are close, or the simplex has become very small."
  </PARA>

  <PARA>
    "Either form of termination-close function values or a small
    simplex-can be misleading for badly scaled functions."
  </PARA>

  <LIST>
    <CAPTION>Method Options</CAPTION>

  <ITEM>
    ftol - the function tolerance to terminate the search for the
    minimum; default is sqrt( DBL_EPSILON ) ~ 1.19209289551e-07, where 
    DBL_EPSILON is the smallest number x such that 1.0 != 1.0 + x.
  </ITEM>

  <ITEM>
    maxfev - the maximum number of function evaluations; default 
    is 1024 * n (number of free parameters).    
  </ITEM>

  <ITEM>
    initsimplex - dictates how the non-degenerate initial simplex is
    to be constructed.  Default is 0; see the "cases for initsimplex"
    section below for details. 
  </ITEM>

  <ITEM>
    finalsimplex - at each iteration, a combination of one of the
    following stopping criteria is tested to see if the simplex has
    converged or not.   Full details are in the "cases for
    finalsimplex" section below.
  </ITEM>

  <ITEM>
    step - a list of length n (number of free parameters) to
    initialize the simplex; see the option initsimplex for
    details. The default value is step=[0.4, 0.4, .... 0.4] where n =
    length( step ). 
  </ITEM>

  <ITEM>
    iquad - boolean which indicates whether a fit to a quadratic
    surface is done.  If iquad is set to one (the default) then a fit
    to a quadratic surface is done; if iquad is set to 0 then the
    quadratic surface fit is not done.  If the fit to the quadratic
    surface is not positive semi-definitive, then the search
    terminated prematurely.  The code to fit the quadratic surface was
    written by D. E. Shaw, CSIRO, Division of Mathematics &amp;
    Statistics, with amendments by R. W. M. Wedderburn, Rothamsted
    Experimental Station, and Alan Miller, CSIRO, Division of
    Mathematics &amp; Statistics.  See also Nelder &amp; Mead, The
    Computer Journal 7 (1965), 308-313. 
  </ITEM>

  <ITEM>
    verbose - the amount of information to print about the fit
    progress.  Default is 0 (no output).
  </ITEM>
  </LIST>

  <PARA title="Cases for initsimplex">
    The option initsimplex (default is 0 ) dictates how the
    non-degenerate initial simplex is to be constructed:
  </PARA>

<VERBATIM>
if initsimplex == 0:

Then x_(user_supplied) is one of the vertices of the simplex. 
The other n vertices are:

    for ( int i = 0; i &lt; n; ++i ) {
    for ( int j = 0; j &lt; n; ++j )
      x[ i + 1 ][ j ] = x_[ j ];
      x[ i + 1 ][ i ] = x_[ i ] + step[ i ];
      }

where step[i] is the ith element of the option step.

if initsimplex == 1:

Then x_(user_supplied) is one of the vertices of the simplex. 
The other n vertices are:

                    { x_[j] + pn,   if i - 1 != j
                    {
        x[i][j]  =  {
                    {
                    { x_[j] + qn,   otherwise

    for 1 &lt;= i &lt;= n, 0 &lt;= j &lt; n

    where pn = ( sqrt( n + 1 ) - 1 + n ) / ( n * sqrt(2) )
          qn = ( sqrt( n + 1 ) - 1 ) / ( n * sqrt(2) )
</VERBATIM>

  <PARA title="Cases for finalsimplex">
    At each iteration, a combination of one of the following stopping 
    criteria is tested to see if the simplex has converged or not.
  </PARA>

<VERBATIM>
case a (if the max length of the simplex small enough):

      max(    | x_i - x_0 | ) &lt;= ftol max( 1, | x_0  | )
   1 &lt;= i &lt;= n

case b (if the std dev of the simplex is &lt; ftol):
     
     	n           -   2
       ===   ( f  - f ) 
       \        i                    2
       /     -----------     &lt;=  ftol
       ====   sqrt( n )	
       i = 0

case c (if the function values are close enough):

   f_0  &lt; f_(n-1)     within ftol
</VERBATIM>

  <PARA>
    The combination of the above stopping criteria are:
  </PARA>

  <LIST>
    <ITEM>
      case 0: same as case a
    </ITEM>

    <ITEM>
      case 1: case a, case b and case c have to be met
    </ITEM>

    <ITEM>
      case 2: case a and either case b or case c have to be met.
    </ITEM>
  </LIST>

  <LIST>
    <CAPTION>finalsimplex values</CAPTION>

    <ITEM>
      if finalsimplex = 0 then convergence is assumed if case 1 is met.
    </ITEM>

    <ITEM>
   finalsimplex = 1  then convergence is assumed if case 2 is met.
    </ITEM>

    <ITEM>
   finalsimplex = 2  then convergence is assumed if case 0 is met at
                     two consecutive iterations.
    </ITEM>

    <ITEM>
   finalsimplex = 3  then convergence is assumed if case 0 then case 1
                     are met on two consecutive iterations.
    </ITEM>

    <ITEM>
   finalsimplex = 4  then convergence is assumed if case 0 then case 1
                     then case 0 are met on three consecutive iterations.
    </ITEM>

    <ITEM>
   finalsimplex = 5  then convergence is assumed if case 0 then case 1
                     then case 0 are met on three consecutive iterations.
    </ITEM>

    <ITEM>
   finalsimplex = 6  then convergence is assumed if case 1 then case 1
                     then case 0 are met on three consecutive iterations.
    </ITEM>

    <ITEM>
   finalsimplex = 7  then convergence is assumed if case 2 then case 1
                     then case 0 are met on three consecutive iterations.
    </ITEM>

    <ITEM>
   finalsimplex = 8  then convergence is assumed if case 0 then case 2
                     then case 0 are met on three consecutive iterations.
    </ITEM>

    <ITEM>
   finalsimplex = 9  then convergence is assumed if case 0 then case 1
                     then case 1 are met on three consecutive iterations.
    </ITEM>

    <ITEM>
   finalsimplex = 10 then convergence is assumed if case 0 then case 2
                     then case 1 are met on three consecutive iterations.
    </ITEM>

    <ITEM>
   finalsimplex = 11 then convergence is assumed if case 1 then case 1
                     then case 1 are met on three consecutive iterations.
    </ITEM>

    <ITEM>
   finalsimplex = 12 then convergence is assumed if case 1 then case 2
                     then case 1 are met on three consecutive iterations.
    </ITEM>

    <ITEM>
   finalsimplex = 13 then convergence is assumed if case 2 then case 1
                     then case 1 are met on three consecutive iterations.
    </ITEM>

    <ITEM>
   else              convergence is assumed if case 2 then case 2
                     then case 2 are met on three consecutive iterations.
    </ITEM>
  </LIST>
</DESC>

    <QEXAMPLELIST>
      <QEXAMPLE>
        <SYNTAX>
          <LINE>sherpa&gt; set_method("neldermead")</LINE>
          <LINE>sherpa&gt; get_method_name()</LINE>
          <LINE>'neldermead'</LINE>
          <LINE>sherpa&gt; set_method("simplex")</LINE>
          <LINE>sherpa&gt; get_method_name()</LINE>
          <LINE>'neldermead'</LINE>
	</SYNTAX>
        <DESC>
          <PARA>
            Set the optimization method and then confirm the new
            value.  This method may be set by either "neldermead" or
            "simplex". 
          </PARA>
        </DESC>
      </QEXAMPLE>
    </QEXAMPLELIST>

<BUGS>
     <PARA>
        See the
        <HREF link="http://cxc.harvard.edu/sherpa/bugs/">bugs pages
        on the Sherpa website</HREF> for an up-to-date listing of known bugs.
     </PARA>
   </BUGS>
<VERSION>CIAO 4.4</VERSION>

<LASTMODIFIED>December 2011</LASTMODIFIED>

</ENTRY></cxchelptopics>
