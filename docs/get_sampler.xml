<?xml version="1.0"?>
<!DOCTYPE cxchelptopics SYSTEM "CXCHelp.dtd">
<!--

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
This is a generated file.  DO NOT EDIT!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

-->
<cxchelptopics><ENTRY pkg="sherpa" key="get_sampler" refkeywords=" jumping rule MCMC MH Metropolis Metropolis-Hastings get_sampler_opt  get_sampler_name  Markov chain Monte Carlo  sample sampler " seealsogroups="sh.get " displayseealsogroups="" context="statistics">



    <SYNOPSIS>
      Return information on the current pyBLoCXS sampler.
    </SYNOPSIS>

    <SYNTAX>
        <LINE>get_sampler()</LINE>
	<LINE>get_sampler_opt( [optname] )</LINE>
	<LINE>get_sampler_name()</LINE>
      
    </SYNTAX>

    <DESC>
      <PARA>
      pyBLoCXS is a sophisticated Markov chain Monte Carlo (MCMC) based algorithm designed to carry out Bayesian Low-Count X-ray Spectral (BLoCXS) analysis in the Sherpa environment.  The algorithm explores parameter space at a suspected minimum using a predefined Sherpa model to high-energy X-ray spectral data.  
     </PARA>

      <PARA>
	The Sherpa get_sampler  commands return information about the type of
	jumping rule used in MCMC.  "MH" is Metropolis-Hastings, which
	always jumps from the best-fit, and "MetropolisMH" is
	Metropolis with Metropolis-Hastings that jumps from the
	best-fit with probability 'p_M', else it jumps from the last
	accepted jump. "PragBayes" is used when effective area calibration uncertainty is to be included in the calculation.  (At each nominal MCMC
iteration, a new calibration product is generated, and a series
of N (option in set_sampler_opt) MCMC sub-iteration steps are
carried out, choosing between Metropolis and Metropolis-Hastings
types of samplers with probability p_M (option in set_sampler_opt).
Only the last of these sub-iterations are kept in the chain.)
      </PARA>


      <LIST>
        <ITEM>
	  get_sampler - access configuration options for the current
	  sampler
        </ITEM>

        <ITEM>
	  get_sampler_opt - access a particular sampler option for a pyBLoCXS chain  
        </ITEM>

        <ITEM>
	  get_sampler_name - access the current sampler name
        </ITEM>
      </LIST>

      <PARA>
	The configuration options returned by get_sampler include the following:
      </PARA>
      
      <PARA>
	Metropolis-Hastings Jumping Rule
      </PARA>
     
   <LIST>
    <ITEM> defaultprior - Boolean to indicate that all parameters have
    the default flat prior.
    </ITEM>
    <ITEM> inv - Boolean or array of booleans indicating which parameters are on the inverse scale. </ITEM>
    <ITEM> log - Boolean or array of booleans indicating which parameters are on the logarithm scale (natural log). </ITEM>
    <ITEM> originalscale - Array of booleans indicating which parameters are on the original scale. </ITEM>
    <ITEM> priorshape - Array of booleans indicating which parameters have associated user-defined prior functions. </ITEM>
    <ITEM> scale - A scalar multiple of the output of covar() used in the scale of the t-distribution. </ITEM>

   </LIST>
    
   <PARA>
     Mixture of Metropolis and Metropolis-Hastings Jumping Rules
   </PARA>
 
    <LIST>
    <ITEM> defaultprior - Boolean to indicate that all parameters have the default flat prior. </ITEM>
    <ITEM> inv -  Boolean or array of booleans indicating which parameters are on the inverse scale. </ITEM>
    <ITEM> log - Boolean or array of booleans indicating which parameters are on the logarithm scale (natural log). </ITEM>
    <ITEM> originalscale - Array of booleans indicating which parameters are on the original scale. </ITEM>
    <ITEM> p_M - The proportion of jumps generated by the Metropolis jumping rule. </ITEM>
    <ITEM> priorshape - Array of booleans indicating which parameters have associated user-defined prior functions. </ITEM>
    <ITEM> scale -  A scalar multiple of the output of covar() used in the scale of the t-distribution. </ITEM>
    </LIST>

      <PARA>
        Available samplers are returned by the list_samplers command        
        (<HREF link="http://cxc.harvard.edu/sherpa/ahelp/list_samplers.html">"ahelp list_samplers"</HREF>).
      </PARA>

      <PARA>
	Refer to
	the <HREF link="http://hea-www.harvard.edu/AstroStat/pyBLoCXS/#high-level-user-interface-functions">pyBLoCXS
	documentation</HREF> for additional information about the algorithm.
      </PARA>	
    </DESC>

    <QEXAMPLELIST>
      <QEXAMPLE>
       <SYNTAX>
	  <LINE>sherpa&gt; print get_sampler_name()</LINE>
	</SYNTAX>
	<DESC>
          <PARA>
	    Return the name of the current sampler. In this example,
	    it is the default "MetropolisMH" for Metropolis withnMetropolis-Hastings.
	  </PARA>

<VERBATIM>
sherpa&gt; load_pha("pha.fits")
sherpa&gt; set_model(xsphabs.abs1*powlaw1d.p1)
sherpa&gt; set_stat("cash")
sherpa&gt; fit()
sherpa&gt; covar()

sherpa&gt; print get_sampler_name()
        MetropolisMH
</VERBATIM>
        </DESC>
      </QEXAMPLE>

      <QEXAMPLE>
        <SYNTAX>
	  <LINE>sherpa&gt; print get_sampler()</LINE>
	</SYNTAX>
	<DESC>
          <PARA>
	    Retrieve the configuration options for the current sampler. The
	    output for this example is: 
	  </PARA>

<VERBATIM>
"{'priorshape': False, 'scale': 1, 'log': False, 'defaultprior': True,
'inv': False, 'sigma_m': False, 'priors': (), 'originalscale': True,
'verbose': False}"
</VERBATIM>
        </DESC>
      </QEXAMPLE>

      <QEXAMPLE>
        <SYNTAX>
	  <LINE>sherpa&gt; get_sampler_opt('log')</LINE>
	</SYNTAX>
	<DESC>
          <PARA>
	    Return the current setting for the 'log' configuration
	    option of the current sampler.
	  </PARA>

<VERBATIM>
sherpa&gt; get_sampler_opt('log')
        False
</VERBATIM>
        </DESC>
      </QEXAMPLE>
    </QEXAMPLELIST>
	<BUGS>
     <PARA>
        See the
        <HREF link="http://cxc.harvard.edu/sherpa/bugs/">bugs pages
        on the Sherpa website</HREF> for an up-to-date listing of known bugs.
     </PARA>
   </BUGS>
    <VERSION>CIAO 4.5</VERSION>
    <LASTMODIFIED>December 2012</LASTMODIFIED>
</ENTRY></cxchelptopics>
